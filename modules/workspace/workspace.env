if [ ! -z "$WS_PROFILE_PATH" ]
then
    _ppath=$WS_PROFILE_PATH
else
    _ppath=$HOME/.config/ws-profiles
fi

if [ ! -z "$WS_WORKSPACE_PATH" ]
then
    _wpath=$WS_WORKSPACE_PATH
else
    _wpath=$HOME/.cache/ws-workspaces
fi

_ws_current_profile=""

mkdir -p $_ppath $_wpath

ws-create() {
    _target="$_wpath/$(pwd | sha1sum | cut -d' ' -f1)"
    [ -f $_target ] && rm -f $_target
    echo $(pwd) > $_target
    if [ -z "$_ws_current_profile" ]
    then
        echo "---" >> $_target
    else
        echo "$_ws_current_profile" >> $_target
    fi
    [ -f $_wpath/active ] && rm -f $_wpath/active
    pwd > $_wpath/active
    echo "Workspace Saved"
}

ws-abandon() {
    _target="$_wpath/$(pwd | sha1sum | cut -d' ' -f1)"
    [ -f $_target ] && rm -f $_target
    [ -f $_wpath/active ] && rm -f $_wpath/active
    echo "Workspace Removed"
}

ws-load() {
    _target="$_wpath/$(pwd | sha1sum | cut -d' ' -f1)"
    [ ! -f $_target ] && echo "No workspace found for $PWD" && return
    _target_profile="$(cat $_target | sed -n 2p)"
    [[ $_target_profile != "---" ]] && ws-profile-load $(basename ${_target_profile%.profile})
    if [ -f "$PWD/venv/bin/activate" ]
    then
        source "$PWD/venv/bin/activate"
    elif [ -f "$PWD/packages_venv/bin/activate" ]
    then
        source "$PWD/packages_venv/bin/activate"
    fi
    echo "Workspace Restored"
}

ws-unload() {
    type deactivate 2>/dev/null 1>/dev/null && deactivate
    [ ! -z "$_ws_current_profile" ] && ws-profile-unload
}

ws-activate() {
    [ ! -f $_wpath/active ] && echo "There is no active workspace." && return
    cd $(cat $_wpath/active)
    ws-load
}

ws-profile-load() {
    _target="$_ppath/$1.profile"
    [ ! -f "$_target" ] && echo "That profile does not exist." && return
    [ ! -z "$_ws_current_profile" ] && ws-profile-on-unload
    source $_target
    _ws_current_profile=$_target
    ws-profile-on-load
}

-ws-profile-load() {
}

ws-profile-unload() {
    [ ! -z "$_ws_current_profile" ] && ws-profile-on-unload
    _ws_current_profile=""
}

ws-profile-edit() {
    [ ! -z "$_ws_current_profile" ] && \
        eval $EDITOR $_ws_current_profile && \
        source $_ws_current_profile && \
        ws-profile-on-unload && \
        ws-profile-on-load
}

ws-profile-list() {
    for file in $(ls $_ppath/*.profile)
    do
        if [[ $_ws_current_profile == $file ]]
        then
            echo "\e[32m-> \e[39m$(basename ${file%.profile})"
        else
            echo "   \e[90m$(basename ${file%.profile})\e[39m"
        fi
    done
}

ws-profile-trigger() {
    [ ! -z "$_ws_current_profile" ] && ws-profile-on-trigger $@
}

ws-profile-create() {
_target="$_ppath/$1.profile"
[ -f "$_target" ] && echo "That profile already exist." && return
cat>$_target<<EOF
ws-profile-on-load() {
    echo "Im loaded"
}

ws-profile-on-unload() {
    echo "Im unloaded"
}

ws-profile-on-trigger() {
    echo "Im triggered"
}
EOF

[ ! -z "$_target" ] && eval $EDITOR $_target
}

ws-profile-remove() {
    _target="$_ppath/$1.profile"
    [ ! -f "$_target" ] && echo "That profile does not exist." && return
    rm $_target
}

ws-help() {
    echo "Workspaces - Terminal as an IDE"
    echo "-------------------------------------------------------------------------------"
    echo "ws-set             - Create or overwrite a workspace for the current directory."
    echo "ws-abandon         - Remove the workspace for the current directory."
    echo "ws-load            - Load the workspace for the current directory."
    echo "ws-unload          - Unload the current workspace."
    echo "ws-activate        - Activate the last loaded workspace."
    echo "ws-profile-load    - Load a profile."
    echo "ws-profile-unload  - Unload a profile."
    echo "ws-profile-edit    - Edit the current profile and reload."
    echo "ws-profile-list    - List available profiles."
    echo "ws-profile-trigger - Trigger a profile custom action."
    echo "ws-profile-create  - Create a new profile."
    echo "ws-profile-remove  - Remove a profile."
    echo "ws-help            - Show this message."
}
